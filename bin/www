#!/usr/bin/env node

/**
 * Module dependencies.
 */

require('dotenv').config();

if (process.env.ENABLE_DATADOG === 'true') {
  require('dd-trace').init();
}
const http = require('http');

const config = require('../configs');
const { makeApp } = require('../app.js');
const logger = require('../utils/logger');

(async () => {
  try {
    const app = await makeApp();
    const port = normalizePort(config.port || '3000');
    app.set('port', port);
    const server = http.createServer(app);

    // The signals we want to handle
    // NOTE: although it is tempting, the SIGKILL signal (9) cannot be intercepted and handled
    const signals = {
      SIGHUP: 1,
      SIGINT: 2,
      SIGTERM: 15
    };
    // Do any necessary shutdown logic for our application here
    const shutdown = (signal, value) => {
      logger.info('Shutdown!');
      server.close(() => {
        logger.info(`Server stopped by ${signal} with value ${value}`);
        process.exit(128 + value);
      });
    };

    // Create a listener for each of the signals that we want to handle
    Object.keys(signals).forEach((signal) => {
      process.on(signal, () => {
        logger.info(`Process received a ${signal} signal`);
        shutdown(signal, signals[signal]);
      });
    });

    server.listen(port, (err) => {
      if (err) {
        logger.error('Cant start the app ', err);
        return process.exit(1);
      }

      return logger.info(`Server listening on port ${port}`);
    });
  } catch (err) {
    logger.error('Cant start the app ', err);
    process.exit(1);
  }
})();


/**
 * Normalize a port into a number, string, or false.
 */
const normalizePort = (val) => {
  const normalizedPort = parseInt(val, 10);

  if (isNaN(normalizedPort)) {
    // named pipe
    return val;
  }

  if (normalizedPort >= 0) {
    // port number
    return normalizedPort;
  }

  return false;
};
